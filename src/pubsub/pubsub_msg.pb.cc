// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pubsub_msg.proto

#include "pubsub_msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class pubsub_msg_tDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pubsub_msg_t> _instance;
} _pubsub_msg_t_default_instance_;
static void InitDefaultsscc_info_pubsub_msg_t_pubsub_5fmsg_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_pubsub_msg_t_default_instance_;
    new (ptr) ::pubsub_msg_t();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::pubsub_msg_t::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pubsub_msg_t_pubsub_5fmsg_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pubsub_msg_t_pubsub_5fmsg_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_pubsub_5fmsg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_pubsub_5fmsg_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_pubsub_5fmsg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_pubsub_5fmsg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::pubsub_msg_t, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::pubsub_msg_t, remoteip_),
  PROTOBUF_FIELD_OFFSET(::pubsub_msg_t, length_),
  PROTOBUF_FIELD_OFFSET(::pubsub_msg_t, type_),
  PROTOBUF_FIELD_OFFSET(::pubsub_msg_t, magic_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::pubsub_msg_t)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_pubsub_msg_t_default_instance_),
};

const char descriptor_table_protodef_pubsub_5fmsg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020pubsub_msg.proto\"M\n\014pubsub_msg_t\022\020\n\010re"
  "moteIP\030\001 \001(\t\022\016\n\006length\030\002 \001(\003\022\014\n\004type\030\003 \001"
  "(\003\022\r\n\005magic\030\004 \001(\003b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_pubsub_5fmsg_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_pubsub_5fmsg_2eproto_sccs[1] = {
  &scc_info_pubsub_msg_t_pubsub_5fmsg_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_pubsub_5fmsg_2eproto_once;
static bool descriptor_table_pubsub_5fmsg_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pubsub_5fmsg_2eproto = {
  &descriptor_table_pubsub_5fmsg_2eproto_initialized, descriptor_table_protodef_pubsub_5fmsg_2eproto, "pubsub_msg.proto", 105,
  &descriptor_table_pubsub_5fmsg_2eproto_once, descriptor_table_pubsub_5fmsg_2eproto_sccs, descriptor_table_pubsub_5fmsg_2eproto_deps, 1, 0,
  schemas, file_default_instances, TableStruct_pubsub_5fmsg_2eproto::offsets,
  file_level_metadata_pubsub_5fmsg_2eproto, 1, file_level_enum_descriptors_pubsub_5fmsg_2eproto, file_level_service_descriptors_pubsub_5fmsg_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_pubsub_5fmsg_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_pubsub_5fmsg_2eproto), true);

// ===================================================================

void pubsub_msg_t::InitAsDefaultInstance() {
}
class pubsub_msg_t::_Internal {
 public:
};

pubsub_msg_t::pubsub_msg_t()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:pubsub_msg_t)
}
pubsub_msg_t::pubsub_msg_t(const pubsub_msg_t& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  remoteip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_remoteip().empty()) {
    remoteip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remoteip_);
  }
  ::memcpy(&length_, &from.length_,
    static_cast<size_t>(reinterpret_cast<char*>(&magic_) -
    reinterpret_cast<char*>(&length_)) + sizeof(magic_));
  // @@protoc_insertion_point(copy_constructor:pubsub_msg_t)
}

void pubsub_msg_t::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_pubsub_msg_t_pubsub_5fmsg_2eproto.base);
  remoteip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&magic_) -
      reinterpret_cast<char*>(&length_)) + sizeof(magic_));
}

pubsub_msg_t::~pubsub_msg_t() {
  // @@protoc_insertion_point(destructor:pubsub_msg_t)
  SharedDtor();
}

void pubsub_msg_t::SharedDtor() {
  remoteip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void pubsub_msg_t::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pubsub_msg_t& pubsub_msg_t::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pubsub_msg_t_pubsub_5fmsg_2eproto.base);
  return *internal_default_instance();
}


void pubsub_msg_t::Clear() {
// @@protoc_insertion_point(message_clear_start:pubsub_msg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remoteip_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&length_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&magic_) -
      reinterpret_cast<char*>(&length_)) + sizeof(magic_));
  _internal_metadata_.Clear();
}

const char* pubsub_msg_t::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string remoteIP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_remoteip(), ptr, ctx, "pubsub_msg_t.remoteIP");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 type = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 magic = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          magic_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pubsub_msg_t::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:pubsub_msg_t)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string remoteIP = 1;
  if (this->remoteip().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_remoteip().data(), static_cast<int>(this->_internal_remoteip().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "pubsub_msg_t.remoteIP");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_remoteip(), target);
  }

  // int64 length = 2;
  if (this->length() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_length(), target);
  }

  // int64 type = 3;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_type(), target);
  }

  // int64 magic = 4;
  if (this->magic() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_magic(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:pubsub_msg_t)
  return target;
}

size_t pubsub_msg_t::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:pubsub_msg_t)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string remoteIP = 1;
  if (this->remoteip().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_remoteip());
  }

  // int64 length = 2;
  if (this->length() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_length());
  }

  // int64 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_type());
  }

  // int64 magic = 4;
  if (this->magic() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_magic());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pubsub_msg_t::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:pubsub_msg_t)
  GOOGLE_DCHECK_NE(&from, this);
  const pubsub_msg_t* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pubsub_msg_t>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:pubsub_msg_t)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:pubsub_msg_t)
    MergeFrom(*source);
  }
}

void pubsub_msg_t::MergeFrom(const pubsub_msg_t& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:pubsub_msg_t)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.remoteip().size() > 0) {

    remoteip_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.remoteip_);
  }
  if (from.length() != 0) {
    _internal_set_length(from._internal_length());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
  if (from.magic() != 0) {
    _internal_set_magic(from._internal_magic());
  }
}

void pubsub_msg_t::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:pubsub_msg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pubsub_msg_t::CopyFrom(const pubsub_msg_t& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:pubsub_msg_t)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pubsub_msg_t::IsInitialized() const {
  return true;
}

void pubsub_msg_t::InternalSwap(pubsub_msg_t* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  remoteip_.Swap(&other->remoteip_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(length_, other->length_);
  swap(type_, other->type_);
  swap(magic_, other->magic_);
}

::PROTOBUF_NAMESPACE_ID::Metadata pubsub_msg_t::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::pubsub_msg_t* Arena::CreateMaybeMessage< ::pubsub_msg_t >(Arena* arena) {
  return Arena::CreateInternal< ::pubsub_msg_t >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
